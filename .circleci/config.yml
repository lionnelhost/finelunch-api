version: 2.1 # Use 2.1 to enable using orbs and other features.

# Declare the orbs that we'll use in our config.
# read more about orbs: https://circleci.com/docs/2.0/using-orbs/
# orbs:
#   ruby: circleci/ruby@1.0 
orbs:
  ruby: circleci/ruby@1.0 
  heroku: circleci/heroku@1.2.5
  

references:
  container_setup: &container_setup
    docker: # run the steps with Docker
      - image: circleci/ruby:2.7.2 # ...with this image as the primary container; this is where all `steps` will run
        environment: # environment variables for primary container
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          PGHOST: 127.0.0.1
          PGUSER: postgres
          RAILS_ENV: test
      - image: circleci/postgres:9.5-alpine # database image
        environment: # environment variables for database
          POSTGRES_USER: postgres
          POSTGRES_DB: finelunch_api_test
          POSTGRES_PASSWORD: postgres

  check_bundler_verson: &check_bundler_verson
    run:
      name: Which bundler?
      command: bundle -v

  run_specs: &run_specs
    run:
      name: Run rspec in parallel
      command: |
        bundle exec rspec --profile 10 \
                          --format RspecJunitFormatter \
                          --out test_results/rspec.xml \
                          --format progress \
                          $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)

jobs:
  build: # our first job, named "build"
    <<: *container_setup
    steps:
      - checkout # pull down our git code.
      - *check_bundler_verson
      - restore_cache:
          keys:
            - base-simulation-bundle-{{ checksum "Gemfile.lock" }}
            - base-simulation-bundle

      - run: # Install Ruby dependencies
          name: Bundle Install
          command: bundle check || bundle install
      # Store bundle cache for Ruby dependencies
      - save_cache:
          key: base-simulation-bundle-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
  test:  # our next job, called "test"
    # we run "parallel job containers" to enable speeding up our tests;
    # this splits our tests across multiple containers.
    parallelism: 3 
    # here we set TWO docker images.
    <<: *container_setup
    steps:
      - checkout 
      - ruby/install-deps 
      # Here we make sure that the secondary container boots 
      # up before we run operations on the database.
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bundle exec rails db:schema:load --trace
      # Run rspec in parallel
      - run:
          name: RSpec
          command: |
            bundle exec rspec --profile 10 \
                              --format progress
# We use workflows to orchestrate the jobs that we declared above.
workflows:
  version: 2
  build_and_test_development:     # The name of our workflow is "build_and_test"
    jobs:             # The list of jobs we run as part of this workflow.
      - build         # Run build first.
      - test:         # Then run test,
          requires:   # Test requires that build passes for it to run.
            - build   # Finally, run the build job.
          filters:
            branches:
              only:
                - develop
  deploy_development:
    jobs:
      - heroku/deploy-via-git:
          post-steps:
            - run: 
                name: Migrate db
                command: heroku run rake db:migrate --app $HEROKU_APP_NAME
          requires:
            - test
          filters:
            branches:
              only:
                - main